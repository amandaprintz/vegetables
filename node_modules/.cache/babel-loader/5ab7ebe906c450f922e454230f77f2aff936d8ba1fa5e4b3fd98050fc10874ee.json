{"ast":null,"code":"var _jsxFileName = \"/Users/amandakarlssonprintz/Desktop/vegetables/src/AppContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from \"react\";\nimport image1 from \"./assets/images/image1.jpg\";\nimport image2 from \"./assets/images/image2.jpg\";\nimport image3 from \"./assets/images/image3.jpg\";\nimport image4 from \"./assets/images/image4.jpg\";\nimport image5 from \"./assets/images/image5.jpg\";\nimport image6 from \"./assets/images/image6.jpg\";\nimport image7 from \"./assets/images/image7.jpg\";\nimport image8 from \"./assets/images/image8.jpg\";\nimport image9 from \"./assets/images/image9.jpg\";\nimport image10 from \"./assets/images/image10.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cards = [{\n  id: 1,\n  img: image1,\n  favorite: false\n}, {\n  id: 2,\n  img: image2,\n  favorite: false\n}, {\n  id: 3,\n  img: image3,\n  favorite: false\n}, {\n  id: 4,\n  img: image4,\n  favorite: false,\n  size: \"large\"\n}, {\n  id: 5,\n  img: image5,\n  favorite: false\n}, {\n  id: 6,\n  img: image6,\n  favorite: false\n}, {\n  id: 7,\n  img: image7,\n  favorite: false\n}, {\n  id: 8,\n  img: image8,\n  favorite: false\n}, {\n  id: 9,\n  img: image9,\n  favorite: false\n}, {\n  id: 10,\n  img: image10,\n  favorite: false\n}];\n\n// Skapa en ny Context\nexport const FavoritesContext = /*#__PURE__*/createContext(null);\n\n// Skapa en Provider-komponent för Context\nexport const FavoritesProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [favorites, setFavorites] = useState([]); // Använd state för att spåra favoriter\n  const [updatedCards, setUpdatedCards] = useState(cards); // State för uppdaterade kort\n\n  const [filterFavorites, setFilterFavorites] = useState(false);\n\n  // Funktion för att lägga till/ta bort favoritmarkering på ett item\n  const toggleFavorite = itemId => {\n    setFavorites(prevFavorites => {\n      const updatedFavorites = [...prevFavorites]; // Kopiera favorites-arrayen\n\n      // Loopa igenom varje kort och ändra favorite-värdet för det aktuella kortet baserat på dess id\n      const updatedCardsCopy = updatedCards.map(card => {\n        if (card.id === itemId) {\n          return {\n            ...card,\n            favorite: !card.favorite\n          }; // Kopiera kortet och ändra favorite-värdet\n        }\n\n        return card;\n      });\n      setUpdatedCards(updatedCardsCopy); // Uppdatera state för uppdaterade korten\n\n      // Lägg till eller ta bort itemId från favorites-arrayen beroende på om det redan finns där eller inte\n      if (updatedFavorites.includes(itemId)) {\n        return updatedFavorites.filter(id => id !== itemId);\n      } else {\n        return [...updatedFavorites, itemId];\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(FavoritesContext.Provider, {\n    value: {\n      filterFavorites,\n      setFilterFavorites,\n      favorites,\n      toggleFavorite,\n      cards: updatedCards\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(FavoritesProvider, \"YnBezpUvu3LmV1ErcKCatRVc7TE=\");\n_c = FavoritesProvider;\nvar _c;\n$RefreshReg$(_c, \"FavoritesProvider\");","map":{"version":3,"names":["React","createContext","useState","image1","image2","image3","image4","image5","image6","image7","image8","image9","image10","jsxDEV","_jsxDEV","cards","id","img","favorite","size","FavoritesContext","FavoritesProvider","_ref","_s","children","favorites","setFavorites","updatedCards","setUpdatedCards","filterFavorites","setFilterFavorites","toggleFavorite","itemId","prevFavorites","updatedFavorites","updatedCardsCopy","map","card","includes","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amandakarlssonprintz/Desktop/vegetables/src/AppContext.tsx"],"sourcesContent":["import React, { createContext, useState } from \"react\";\nimport image1 from \"./assets/images/image1.jpg\";\nimport image2 from \"./assets/images/image2.jpg\";\nimport image3 from \"./assets/images/image3.jpg\";\nimport image4 from \"./assets/images/image4.jpg\";\nimport image5 from \"./assets/images/image5.jpg\";\nimport image6 from \"./assets/images/image6.jpg\";\nimport image7 from \"./assets/images/image7.jpg\";\nimport image8 from \"./assets/images/image8.jpg\";\nimport image9 from \"./assets/images/image9.jpg\";\nimport image10 from \"./assets/images/image10.jpg\";\nimport { GridItemProps } from \"./components/GridItem\";\n\nconst cards = [\n  {\n    id: 1,\n    img: image1,\n    favorite: false,\n  },\n  {\n    id: 2,\n    img: image2,\n    favorite: false,\n  },\n  {\n    id: 3,\n    img: image3,\n    favorite: false,\n  },\n  {\n    id: 4,\n    img: image4,\n    favorite: false,\n    size: \"large\",\n  },\n  {\n    id: 5,\n    img: image5,\n    favorite: false,\n  },\n  {\n    id: 6,\n    img: image6,\n    favorite: false,\n  },\n  {\n    id: 7,\n    img: image7,\n    favorite: false,\n  },\n  {\n    id: 8,\n    img: image8,\n    favorite: false,\n  },\n  {\n    id: 9,\n    img: image9,\n    favorite: false,\n  },\n  {\n    id: 10,\n    img: image10,\n    favorite: false,\n  },\n];\n\n// Skapa en ny Context\nexport const FavoritesContext = createContext<any>(null);\n\n// Skapa en Provider-komponent för Context\nexport const FavoritesProvider: React.FC<any> = ({ children }) => {\n  const [favorites, setFavorites] = useState<number[]>([]); // Använd state för att spåra favoriter\n  const [updatedCards, setUpdatedCards] = useState<GridItemProps[]>(cards); // State för uppdaterade kort\n\n  const [filterFavorites, setFilterFavorites] = useState<boolean>(false);\n\n  // Funktion för att lägga till/ta bort favoritmarkering på ett item\n  const toggleFavorite = (itemId: number) => {\n    setFavorites((prevFavorites) => {\n      const updatedFavorites = [...prevFavorites]; // Kopiera favorites-arrayen\n\n      // Loopa igenom varje kort och ändra favorite-värdet för det aktuella kortet baserat på dess id\n      const updatedCardsCopy = updatedCards.map((card) => {\n        if (card.id === itemId) {\n          return { ...card, favorite: !card.favorite }; // Kopiera kortet och ändra favorite-värdet\n        }\n        return card;\n      });\n\n      setUpdatedCards(updatedCardsCopy); // Uppdatera state för uppdaterade korten\n\n      // Lägg till eller ta bort itemId från favorites-arrayen beroende på om det redan finns där eller inte\n      if (updatedFavorites.includes(itemId)) {\n        return updatedFavorites.filter((id) => id !== itemId);\n      } else {\n        return [...updatedFavorites, itemId];\n      }\n    });\n  };\n\n  return (\n    <FavoritesContext.Provider\n      value={{\n        filterFavorites,\n        setFilterFavorites,\n        favorites,\n        toggleFavorite,\n        cards: updatedCards,\n      }}\n    >\n      {children}\n    </FavoritesContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AACtD,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,OAAO,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlD,MAAMC,KAAK,GAAG,CACZ;EACEC,EAAE,EAAE,CAAC;EACLC,GAAG,EAAEd,MAAM;EACXe,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAAE,CAAC;EACLC,GAAG,EAAEb,MAAM;EACXc,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAAE,CAAC;EACLC,GAAG,EAAEZ,MAAM;EACXa,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAAE,CAAC;EACLC,GAAG,EAAEX,MAAM;EACXY,QAAQ,EAAE,KAAK;EACfC,IAAI,EAAE;AACR,CAAC,EACD;EACEH,EAAE,EAAE,CAAC;EACLC,GAAG,EAAEV,MAAM;EACXW,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAAE,CAAC;EACLC,GAAG,EAAET,MAAM;EACXU,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAAE,CAAC;EACLC,GAAG,EAAER,MAAM;EACXS,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAAE,CAAC;EACLC,GAAG,EAAEP,MAAM;EACXQ,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAAE,CAAC;EACLC,GAAG,EAAEN,MAAM;EACXO,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAAE,EAAE;EACNC,GAAG,EAAEL,OAAO;EACZM,QAAQ,EAAE;AACZ,CAAC,CACF;;AAED;AACA,OAAO,MAAME,gBAAgB,gBAAGnB,aAAa,CAAM,IAAI,CAAC;;AAExD;AACA,OAAO,MAAMoB,iBAAgC,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC3D,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAW,EAAE,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAkBa,KAAK,CAAC,CAAC,CAAC;;EAE1E,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAG5B,QAAQ,CAAU,KAAK,CAAC;;EAEtE;EACA,MAAM6B,cAAc,GAAIC,MAAc,IAAK;IACzCN,YAAY,CAAEO,aAAa,IAAK;MAC9B,MAAMC,gBAAgB,GAAG,CAAC,GAAGD,aAAa,CAAC,CAAC,CAAC;;MAE7C;MACA,MAAME,gBAAgB,GAAGR,YAAY,CAACS,GAAG,CAAEC,IAAI,IAAK;QAClD,IAAIA,IAAI,CAACrB,EAAE,KAAKgB,MAAM,EAAE;UACtB,OAAO;YAAE,GAAGK,IAAI;YAAEnB,QAAQ,EAAE,CAACmB,IAAI,CAACnB;UAAS,CAAC,CAAC,CAAC;QAChD;;QACA,OAAOmB,IAAI;MACb,CAAC,CAAC;MAEFT,eAAe,CAACO,gBAAgB,CAAC,CAAC,CAAC;;MAEnC;MACA,IAAID,gBAAgB,CAACI,QAAQ,CAACN,MAAM,CAAC,EAAE;QACrC,OAAOE,gBAAgB,CAACK,MAAM,CAAEvB,EAAE,IAAKA,EAAE,KAAKgB,MAAM,CAAC;MACvD,CAAC,MAAM;QACL,OAAO,CAAC,GAAGE,gBAAgB,EAAEF,MAAM,CAAC;MACtC;IACF,CAAC,CAAC;EACJ,CAAC;EAED,oBACElB,OAAA,CAACM,gBAAgB,CAACoB,QAAQ;IACxBC,KAAK,EAAE;MACLZ,eAAe;MACfC,kBAAkB;MAClBL,SAAS;MACTM,cAAc;MACdhB,KAAK,EAAEY;IACT,CAAE;IAAAH,QAAA,EAEDA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACiB;AAEhC,CAAC;AAACtB,EAAA,CA3CWF,iBAAgC;AAAAyB,EAAA,GAAhCzB,iBAAgC;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}